/*
 * SpaceTraders API
 *
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;

namespace SpaceTraders.Model
{
    /// <summary>
    /// JumpGate
    /// </summary>
    [DataContract(Name = "JumpGate")]
    public partial class JumpGate : IEquatable<JumpGate>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JumpGate" /> class.
        /// </summary>
        [JsonConstructor]
        protected JumpGate() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="JumpGate" /> class.
        /// </summary>
        /// <param name="jumpRange">The maximum jump range of the gate. (required).</param>
        /// <param name="factionSymbol">The symbol of the faction that owns the gate..</param>
        /// <param name="connectedSystems">The systems within range of the gate that have a corresponding gate. (required).</param>
        public JumpGate(decimal jumpRange = default, string? factionSymbol = default, List<ConnectedSystem>? connectedSystems = default)
        {
            this.JumpRange = jumpRange;
            // to ensure "connectedSystems" is required (not null)
            if (connectedSystems == null)
            {
                throw new ArgumentNullException("connectedSystems is a required property for JumpGate and cannot be null");
            }

            this.ConnectedSystems = connectedSystems;
            this.FactionSymbol = factionSymbol;
        }

        /// <summary>
        /// The maximum jump range of the gate.
        /// </summary>
        /// <value>The maximum jump range of the gate.</value>
        [DataMember(Name = "jumpRange", IsRequired = true, EmitDefaultValue = true)]
        public decimal JumpRange { get; set; }

        /// <summary>
        /// The symbol of the faction that owns the gate.
        /// </summary>
        /// <value>The symbol of the faction that owns the gate.</value>
        [DataMember(Name = "factionSymbol", EmitDefaultValue = false)]
        public string FactionSymbol { get; set; }

        /// <summary>
        /// The systems within range of the gate that have a corresponding gate.
        /// </summary>
        /// <value>The systems within range of the gate that have a corresponding gate.</value>
        [DataMember(Name = "connectedSystems", IsRequired = true, EmitDefaultValue = true)]
        public List<ConnectedSystem> ConnectedSystems { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class JumpGate {\n");
            sb.Append("  JumpRange: ").Append(JumpRange).Append('\n');
            sb.Append("  FactionSymbol: ").Append(FactionSymbol).Append('\n');
            sb.Append("  ConnectedSystems: ").Append(ConnectedSystems).Append('\n');
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as JumpGate);
        }

        /// <summary>
        /// Returns true if JumpGate instances are equal
        /// </summary>
        /// <param name="input">Instance of JumpGate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JumpGate input)
        {
            if (input == null)
            {
                return false;
            }

            return 
                (
                    this.JumpRange == input.JumpRange ||
                    this.JumpRange.Equals(input.JumpRange)
                ) && 
                (
                    this.FactionSymbol == input.FactionSymbol ||
                    (this.FactionSymbol != null &&
                    this.FactionSymbol.Equals(input.FactionSymbol))
                ) && 
                (
                    this.ConnectedSystems == input.ConnectedSystems ||
                    this.ConnectedSystems != null &&
                    input.ConnectedSystems != null &&
                    this.ConnectedSystems.SequenceEqual(input.ConnectedSystems)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.JumpRange.GetHashCode();
                if (this.FactionSymbol != null)
                {
                    hashCode = (hashCode * 59) + this.FactionSymbol.GetHashCode();
                }

                if (this.ConnectedSystems != null)
                {
                    hashCode = (hashCode * 59) + this.ConnectedSystems.GetHashCode();
                }

                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
