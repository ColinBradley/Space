/*
 * SpaceTraders API
 *
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using SpaceTraders.Client;
using SpaceTraders.Model;

namespace SpaceTraders.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISystemsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Jump Gate
        /// </summary>
        /// <remarks>
        /// Get jump gate details for a waypoint. Requires a waypoint of type &#x60;JUMP_GATE&#x60; to use.  The response will return all systems that are have a Jump Gate in range of this Jump Gate. Those systems can be jumped to from this Jump Gate.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemSymbol">The system symbol</param>
        /// <param name="waypointSymbol">The waypoint symbol</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetJumpGate200Response</returns>
        GetJumpGate200Response GetJumpGate(string systemSymbol, string waypointSymbol, int operationIndex = 0);

        /// <summary>
        /// Get Jump Gate
        /// </summary>
        /// <remarks>
        /// Get jump gate details for a waypoint. Requires a waypoint of type &#x60;JUMP_GATE&#x60; to use.  The response will return all systems that are have a Jump Gate in range of this Jump Gate. Those systems can be jumped to from this Jump Gate.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemSymbol">The system symbol</param>
        /// <param name="waypointSymbol">The waypoint symbol</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetJumpGate200Response</returns>
        ApiResponse<GetJumpGate200Response> GetJumpGateWithHttpInfo(string systemSymbol, string waypointSymbol, int operationIndex = 0);
        /// <summary>
        /// Get Market
        /// </summary>
        /// <remarks>
        /// Retrieve imports, exports and exchange data from a marketplace. Requires a waypoint that has the &#x60;Marketplace&#x60; trait to use.  Send a ship to the waypoint to access trade good prices and recent transactions. Refer to the [Market Overview page](https://docs.spacetraders.io/game-concepts/markets) to gain better a understanding of the market in the game.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemSymbol">The system symbol</param>
        /// <param name="waypointSymbol">The waypoint symbol</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetMarket200Response</returns>
        GetMarket200Response GetMarket(string systemSymbol, string waypointSymbol, int operationIndex = 0);

        /// <summary>
        /// Get Market
        /// </summary>
        /// <remarks>
        /// Retrieve imports, exports and exchange data from a marketplace. Requires a waypoint that has the &#x60;Marketplace&#x60; trait to use.  Send a ship to the waypoint to access trade good prices and recent transactions. Refer to the [Market Overview page](https://docs.spacetraders.io/game-concepts/markets) to gain better a understanding of the market in the game.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemSymbol">The system symbol</param>
        /// <param name="waypointSymbol">The waypoint symbol</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetMarket200Response</returns>
        ApiResponse<GetMarket200Response> GetMarketWithHttpInfo(string systemSymbol, string waypointSymbol, int operationIndex = 0);
        /// <summary>
        /// Get Shipyard
        /// </summary>
        /// <remarks>
        /// Get the shipyard for a waypoint. Requires a waypoint that has the &#x60;Shipyard&#x60; trait to use. Send a ship to the waypoint to access data on ships that are currently available for purchase and recent transactions.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemSymbol">The system symbol</param>
        /// <param name="waypointSymbol">The waypoint symbol</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetShipyard200Response</returns>
        GetShipyard200Response GetShipyard(string systemSymbol, string waypointSymbol, int operationIndex = 0);

        /// <summary>
        /// Get Shipyard
        /// </summary>
        /// <remarks>
        /// Get the shipyard for a waypoint. Requires a waypoint that has the &#x60;Shipyard&#x60; trait to use. Send a ship to the waypoint to access data on ships that are currently available for purchase and recent transactions.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemSymbol">The system symbol</param>
        /// <param name="waypointSymbol">The waypoint symbol</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetShipyard200Response</returns>
        ApiResponse<GetShipyard200Response> GetShipyardWithHttpInfo(string systemSymbol, string waypointSymbol, int operationIndex = 0);
        /// <summary>
        /// Get System
        /// </summary>
        /// <remarks>
        /// Get the details of a system.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemSymbol">The system symbol</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetSystem200Response</returns>
        GetSystem200Response GetSystem(string systemSymbol, int operationIndex = 0);

        /// <summary>
        /// Get System
        /// </summary>
        /// <remarks>
        /// Get the details of a system.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemSymbol">The system symbol</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetSystem200Response</returns>
        ApiResponse<GetSystem200Response> GetSystemWithHttpInfo(string systemSymbol, int operationIndex = 0);
        /// <summary>
        /// List Waypoints in System
        /// </summary>
        /// <remarks>
        /// Return a paginated list of all of the waypoints for a given system.  If a waypoint is uncharted, it will return the &#x60;Uncharted&#x60; trait instead of its actual traits.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemSymbol">The system symbol</param>
        /// <param name="page">What entry offset to request (optional, default to 1)</param>
        /// <param name="limit">How many entries to return per page (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetSystemWaypoints200Response</returns>
        GetSystemWaypoints200Response GetSystemWaypoints(string systemSymbol, int? page = default, int? limit = default, int operationIndex = 0);

        /// <summary>
        /// List Waypoints in System
        /// </summary>
        /// <remarks>
        /// Return a paginated list of all of the waypoints for a given system.  If a waypoint is uncharted, it will return the &#x60;Uncharted&#x60; trait instead of its actual traits.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemSymbol">The system symbol</param>
        /// <param name="page">What entry offset to request (optional, default to 1)</param>
        /// <param name="limit">How many entries to return per page (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetSystemWaypoints200Response</returns>
        ApiResponse<GetSystemWaypoints200Response> GetSystemWaypointsWithHttpInfo(string systemSymbol, int? page = default, int? limit = default, int operationIndex = 0);
        /// <summary>
        /// List Systems
        /// </summary>
        /// <remarks>
        /// Return a paginated list of all systems.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">What entry offset to request (optional, default to 1)</param>
        /// <param name="limit">How many entries to return per page (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetSystems200Response</returns>
        GetSystems200Response GetSystems(int? page = default, int? limit = default, int operationIndex = 0);

        /// <summary>
        /// List Systems
        /// </summary>
        /// <remarks>
        /// Return a paginated list of all systems.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">What entry offset to request (optional, default to 1)</param>
        /// <param name="limit">How many entries to return per page (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetSystems200Response</returns>
        ApiResponse<GetSystems200Response> GetSystemsWithHttpInfo(int? page = default, int? limit = default, int operationIndex = 0);
        /// <summary>
        /// Get Waypoint
        /// </summary>
        /// <remarks>
        /// View the details of a waypoint.  If the waypoint is uncharted, it will return the &#39;Uncharted&#39; trait instead of its actual traits.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemSymbol">The system symbol</param>
        /// <param name="waypointSymbol">The waypoint symbol</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetWaypoint200Response</returns>
        GetWaypoint200Response GetWaypoint(string systemSymbol, string waypointSymbol, int operationIndex = 0);

        /// <summary>
        /// Get Waypoint
        /// </summary>
        /// <remarks>
        /// View the details of a waypoint.  If the waypoint is uncharted, it will return the &#39;Uncharted&#39; trait instead of its actual traits.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemSymbol">The system symbol</param>
        /// <param name="waypointSymbol">The waypoint symbol</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetWaypoint200Response</returns>
        ApiResponse<GetWaypoint200Response> GetWaypointWithHttpInfo(string systemSymbol, string waypointSymbol, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISystemsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get Jump Gate
        /// </summary>
        /// <remarks>
        /// Get jump gate details for a waypoint. Requires a waypoint of type &#x60;JUMP_GATE&#x60; to use.  The response will return all systems that are have a Jump Gate in range of this Jump Gate. Those systems can be jumped to from this Jump Gate.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemSymbol">The system symbol</param>
        /// <param name="waypointSymbol">The waypoint symbol</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetJumpGate200Response</returns>
        System.Threading.Tasks.Task<GetJumpGate200Response> GetJumpGateAsync(string systemSymbol, string waypointSymbol, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Jump Gate
        /// </summary>
        /// <remarks>
        /// Get jump gate details for a waypoint. Requires a waypoint of type &#x60;JUMP_GATE&#x60; to use.  The response will return all systems that are have a Jump Gate in range of this Jump Gate. Those systems can be jumped to from this Jump Gate.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemSymbol">The system symbol</param>
        /// <param name="waypointSymbol">The waypoint symbol</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetJumpGate200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetJumpGate200Response>> GetJumpGateWithHttpInfoAsync(string systemSymbol, string waypointSymbol, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get Market
        /// </summary>
        /// <remarks>
        /// Retrieve imports, exports and exchange data from a marketplace. Requires a waypoint that has the &#x60;Marketplace&#x60; trait to use.  Send a ship to the waypoint to access trade good prices and recent transactions. Refer to the [Market Overview page](https://docs.spacetraders.io/game-concepts/markets) to gain better a understanding of the market in the game.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemSymbol">The system symbol</param>
        /// <param name="waypointSymbol">The waypoint symbol</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetMarket200Response</returns>
        System.Threading.Tasks.Task<GetMarket200Response> GetMarketAsync(string systemSymbol, string waypointSymbol, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Market
        /// </summary>
        /// <remarks>
        /// Retrieve imports, exports and exchange data from a marketplace. Requires a waypoint that has the &#x60;Marketplace&#x60; trait to use.  Send a ship to the waypoint to access trade good prices and recent transactions. Refer to the [Market Overview page](https://docs.spacetraders.io/game-concepts/markets) to gain better a understanding of the market in the game.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemSymbol">The system symbol</param>
        /// <param name="waypointSymbol">The waypoint symbol</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetMarket200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetMarket200Response>> GetMarketWithHttpInfoAsync(string systemSymbol, string waypointSymbol, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get Shipyard
        /// </summary>
        /// <remarks>
        /// Get the shipyard for a waypoint. Requires a waypoint that has the &#x60;Shipyard&#x60; trait to use. Send a ship to the waypoint to access data on ships that are currently available for purchase and recent transactions.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemSymbol">The system symbol</param>
        /// <param name="waypointSymbol">The waypoint symbol</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetShipyard200Response</returns>
        System.Threading.Tasks.Task<GetShipyard200Response> GetShipyardAsync(string systemSymbol, string waypointSymbol, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Shipyard
        /// </summary>
        /// <remarks>
        /// Get the shipyard for a waypoint. Requires a waypoint that has the &#x60;Shipyard&#x60; trait to use. Send a ship to the waypoint to access data on ships that are currently available for purchase and recent transactions.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemSymbol">The system symbol</param>
        /// <param name="waypointSymbol">The waypoint symbol</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetShipyard200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetShipyard200Response>> GetShipyardWithHttpInfoAsync(string systemSymbol, string waypointSymbol, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get System
        /// </summary>
        /// <remarks>
        /// Get the details of a system.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemSymbol">The system symbol</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetSystem200Response</returns>
        System.Threading.Tasks.Task<GetSystem200Response> GetSystemAsync(string systemSymbol, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get System
        /// </summary>
        /// <remarks>
        /// Get the details of a system.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemSymbol">The system symbol</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetSystem200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetSystem200Response>> GetSystemWithHttpInfoAsync(string systemSymbol, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// List Waypoints in System
        /// </summary>
        /// <remarks>
        /// Return a paginated list of all of the waypoints for a given system.  If a waypoint is uncharted, it will return the &#x60;Uncharted&#x60; trait instead of its actual traits.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemSymbol">The system symbol</param>
        /// <param name="page">What entry offset to request (optional, default to 1)</param>
        /// <param name="limit">How many entries to return per page (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetSystemWaypoints200Response</returns>
        System.Threading.Tasks.Task<GetSystemWaypoints200Response> GetSystemWaypointsAsync(string systemSymbol, int? page = default, int? limit = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List Waypoints in System
        /// </summary>
        /// <remarks>
        /// Return a paginated list of all of the waypoints for a given system.  If a waypoint is uncharted, it will return the &#x60;Uncharted&#x60; trait instead of its actual traits.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemSymbol">The system symbol</param>
        /// <param name="page">What entry offset to request (optional, default to 1)</param>
        /// <param name="limit">How many entries to return per page (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetSystemWaypoints200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetSystemWaypoints200Response>> GetSystemWaypointsWithHttpInfoAsync(string systemSymbol, int? page = default, int? limit = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// List Systems
        /// </summary>
        /// <remarks>
        /// Return a paginated list of all systems.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">What entry offset to request (optional, default to 1)</param>
        /// <param name="limit">How many entries to return per page (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetSystems200Response</returns>
        System.Threading.Tasks.Task<GetSystems200Response> GetSystemsAsync(int? page = default, int? limit = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List Systems
        /// </summary>
        /// <remarks>
        /// Return a paginated list of all systems.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">What entry offset to request (optional, default to 1)</param>
        /// <param name="limit">How many entries to return per page (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetSystems200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetSystems200Response>> GetSystemsWithHttpInfoAsync(int? page = default, int? limit = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get Waypoint
        /// </summary>
        /// <remarks>
        /// View the details of a waypoint.  If the waypoint is uncharted, it will return the &#39;Uncharted&#39; trait instead of its actual traits.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemSymbol">The system symbol</param>
        /// <param name="waypointSymbol">The waypoint symbol</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetWaypoint200Response</returns>
        System.Threading.Tasks.Task<GetWaypoint200Response> GetWaypointAsync(string systemSymbol, string waypointSymbol, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Waypoint
        /// </summary>
        /// <remarks>
        /// View the details of a waypoint.  If the waypoint is uncharted, it will return the &#39;Uncharted&#39; trait instead of its actual traits.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemSymbol">The system symbol</param>
        /// <param name="waypointSymbol">The waypoint symbol</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetWaypoint200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetWaypoint200Response>> GetWaypointWithHttpInfoAsync(string systemSymbol, string waypointSymbol, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISystemsApi : ISystemsApiSync, ISystemsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SystemsApi : ISystemsApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SystemsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SystemsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SystemsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SystemsApi(string basePath)
        {
            this.Configuration = SpaceTraders.Client.Configuration.MergeConfigurations(
                SpaceTraders.Client.GlobalConfiguration.Instance,
                new Configuration { BasePath = basePath }
            );
            this.Client = new ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = SpaceTraders.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SystemsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SystemsApi(Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException(nameof(configuration));

            this.Configuration = SpaceTraders.Client.Configuration.MergeConfigurations(
                SpaceTraders.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ApiClient(this.Configuration.BasePath);
            ExceptionFactory = SpaceTraders.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SystemsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public SystemsApi(ISynchronousClient client, IAsynchronousClient asyncClient, IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException(nameof(client));
            if (asyncClient == null) throw new ArgumentNullException(nameof(asyncClient));
            if (configuration == null) throw new ArgumentNullException(nameof(configuration));

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = SpaceTraders.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }

                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get Jump Gate Get jump gate details for a waypoint. Requires a waypoint of type &#x60;JUMP_GATE&#x60; to use.  The response will return all systems that are have a Jump Gate in range of this Jump Gate. Those systems can be jumped to from this Jump Gate.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemSymbol">The system symbol</param>
        /// <param name="waypointSymbol">The waypoint symbol</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetJumpGate200Response</returns>
        public GetJumpGate200Response GetJumpGate(string systemSymbol, string waypointSymbol, int operationIndex = 0)
        {
            ApiResponse<GetJumpGate200Response> localVarResponse = GetJumpGateWithHttpInfo(systemSymbol, waypointSymbol);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Jump Gate Get jump gate details for a waypoint. Requires a waypoint of type &#x60;JUMP_GATE&#x60; to use.  The response will return all systems that are have a Jump Gate in range of this Jump Gate. Those systems can be jumped to from this Jump Gate.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemSymbol">The system symbol</param>
        /// <param name="waypointSymbol">The waypoint symbol</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetJumpGate200Response</returns>
        public ApiResponse<GetJumpGate200Response> GetJumpGateWithHttpInfo(string systemSymbol, string waypointSymbol, int operationIndex = 0)
        {
            // verify the required parameter 'systemSymbol' is set
            if (systemSymbol == null)
            {
                throw new ApiException(400, "Missing required parameter 'systemSymbol' when calling SystemsApi->GetJumpGate");
            }

            // verify the required parameter 'waypointSymbol' is set
            if (waypointSymbol == null)
            {
                throw new ApiException(400, "Missing required parameter 'waypointSymbol' when calling SystemsApi->GetJumpGate");
            }

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = Array.Empty<string>();

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SpaceTraders.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SpaceTraders.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("systemSymbol", SpaceTraders.Client.ClientUtils.ParameterToString(systemSymbol)); // path parameter
            localVarRequestOptions.PathParameters.Add("waypointSymbol", SpaceTraders.Client.ClientUtils.ParameterToString(waypointSymbol)); // path parameter

            localVarRequestOptions.Operation = "SystemsApi.GetJumpGate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (AgentToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetJumpGate200Response>("/systems/{systemSymbol}/waypoints/{waypointSymbol}/jump-gate", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetJumpGate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Jump Gate Get jump gate details for a waypoint. Requires a waypoint of type &#x60;JUMP_GATE&#x60; to use.  The response will return all systems that are have a Jump Gate in range of this Jump Gate. Those systems can be jumped to from this Jump Gate.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemSymbol">The system symbol</param>
        /// <param name="waypointSymbol">The waypoint symbol</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetJumpGate200Response</returns>
        public async System.Threading.Tasks.Task<GetJumpGate200Response> GetJumpGateAsync(string systemSymbol, string waypointSymbol, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            ApiResponse<GetJumpGate200Response> localVarResponse = await GetJumpGateWithHttpInfoAsync(systemSymbol, waypointSymbol, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Jump Gate Get jump gate details for a waypoint. Requires a waypoint of type &#x60;JUMP_GATE&#x60; to use.  The response will return all systems that are have a Jump Gate in range of this Jump Gate. Those systems can be jumped to from this Jump Gate.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemSymbol">The system symbol</param>
        /// <param name="waypointSymbol">The waypoint symbol</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetJumpGate200Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetJumpGate200Response>> GetJumpGateWithHttpInfoAsync(string systemSymbol, string waypointSymbol, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'systemSymbol' is set
            if (systemSymbol == null)
            {
                throw new ApiException(400, "Missing required parameter 'systemSymbol' when calling SystemsApi->GetJumpGate");
            }

            // verify the required parameter 'waypointSymbol' is set
            if (waypointSymbol == null)
            {
                throw new ApiException(400, "Missing required parameter 'waypointSymbol' when calling SystemsApi->GetJumpGate");
            }

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = Array.Empty<string>();

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SpaceTraders.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SpaceTraders.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("systemSymbol", SpaceTraders.Client.ClientUtils.ParameterToString(systemSymbol)); // path parameter
            localVarRequestOptions.PathParameters.Add("waypointSymbol", SpaceTraders.Client.ClientUtils.ParameterToString(waypointSymbol)); // path parameter

            localVarRequestOptions.Operation = "SystemsApi.GetJumpGate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (AgentToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetJumpGate200Response>("/systems/{systemSymbol}/waypoints/{waypointSymbol}/jump-gate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetJumpGate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Market Retrieve imports, exports and exchange data from a marketplace. Requires a waypoint that has the &#x60;Marketplace&#x60; trait to use.  Send a ship to the waypoint to access trade good prices and recent transactions. Refer to the [Market Overview page](https://docs.spacetraders.io/game-concepts/markets) to gain better a understanding of the market in the game.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemSymbol">The system symbol</param>
        /// <param name="waypointSymbol">The waypoint symbol</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetMarket200Response</returns>
        public GetMarket200Response GetMarket(string systemSymbol, string waypointSymbol, int operationIndex = 0)
        {
            ApiResponse<GetMarket200Response> localVarResponse = GetMarketWithHttpInfo(systemSymbol, waypointSymbol);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Market Retrieve imports, exports and exchange data from a marketplace. Requires a waypoint that has the &#x60;Marketplace&#x60; trait to use.  Send a ship to the waypoint to access trade good prices and recent transactions. Refer to the [Market Overview page](https://docs.spacetraders.io/game-concepts/markets) to gain better a understanding of the market in the game.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemSymbol">The system symbol</param>
        /// <param name="waypointSymbol">The waypoint symbol</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetMarket200Response</returns>
        public ApiResponse<GetMarket200Response> GetMarketWithHttpInfo(string systemSymbol, string waypointSymbol, int operationIndex = 0)
        {
            // verify the required parameter 'systemSymbol' is set
            if (systemSymbol == null)
            {
                throw new ApiException(400, "Missing required parameter 'systemSymbol' when calling SystemsApi->GetMarket");
            }

            // verify the required parameter 'waypointSymbol' is set
            if (waypointSymbol == null)
            {
                throw new ApiException(400, "Missing required parameter 'waypointSymbol' when calling SystemsApi->GetMarket");
            }

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = Array.Empty<string>();

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SpaceTraders.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SpaceTraders.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("systemSymbol", SpaceTraders.Client.ClientUtils.ParameterToString(systemSymbol)); // path parameter
            localVarRequestOptions.PathParameters.Add("waypointSymbol", SpaceTraders.Client.ClientUtils.ParameterToString(waypointSymbol)); // path parameter

            localVarRequestOptions.Operation = "SystemsApi.GetMarket";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (AgentToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetMarket200Response>("/systems/{systemSymbol}/waypoints/{waypointSymbol}/market", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMarket", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Market Retrieve imports, exports and exchange data from a marketplace. Requires a waypoint that has the &#x60;Marketplace&#x60; trait to use.  Send a ship to the waypoint to access trade good prices and recent transactions. Refer to the [Market Overview page](https://docs.spacetraders.io/game-concepts/markets) to gain better a understanding of the market in the game.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemSymbol">The system symbol</param>
        /// <param name="waypointSymbol">The waypoint symbol</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetMarket200Response</returns>
        public async System.Threading.Tasks.Task<GetMarket200Response> GetMarketAsync(string systemSymbol, string waypointSymbol, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            ApiResponse<GetMarket200Response> localVarResponse = await GetMarketWithHttpInfoAsync(systemSymbol, waypointSymbol, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Market Retrieve imports, exports and exchange data from a marketplace. Requires a waypoint that has the &#x60;Marketplace&#x60; trait to use.  Send a ship to the waypoint to access trade good prices and recent transactions. Refer to the [Market Overview page](https://docs.spacetraders.io/game-concepts/markets) to gain better a understanding of the market in the game.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemSymbol">The system symbol</param>
        /// <param name="waypointSymbol">The waypoint symbol</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetMarket200Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetMarket200Response>> GetMarketWithHttpInfoAsync(string systemSymbol, string waypointSymbol, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'systemSymbol' is set
            if (systemSymbol == null)
            {
                throw new ApiException(400, "Missing required parameter 'systemSymbol' when calling SystemsApi->GetMarket");
            }

            // verify the required parameter 'waypointSymbol' is set
            if (waypointSymbol == null)
            {
                throw new ApiException(400, "Missing required parameter 'waypointSymbol' when calling SystemsApi->GetMarket");
            }

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = Array.Empty<string>();

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SpaceTraders.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SpaceTraders.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("systemSymbol", SpaceTraders.Client.ClientUtils.ParameterToString(systemSymbol)); // path parameter
            localVarRequestOptions.PathParameters.Add("waypointSymbol", SpaceTraders.Client.ClientUtils.ParameterToString(waypointSymbol)); // path parameter

            localVarRequestOptions.Operation = "SystemsApi.GetMarket";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (AgentToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetMarket200Response>("/systems/{systemSymbol}/waypoints/{waypointSymbol}/market", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMarket", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Shipyard Get the shipyard for a waypoint. Requires a waypoint that has the &#x60;Shipyard&#x60; trait to use. Send a ship to the waypoint to access data on ships that are currently available for purchase and recent transactions.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemSymbol">The system symbol</param>
        /// <param name="waypointSymbol">The waypoint symbol</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetShipyard200Response</returns>
        public GetShipyard200Response GetShipyard(string systemSymbol, string waypointSymbol, int operationIndex = 0)
        {
            ApiResponse<GetShipyard200Response> localVarResponse = GetShipyardWithHttpInfo(systemSymbol, waypointSymbol);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Shipyard Get the shipyard for a waypoint. Requires a waypoint that has the &#x60;Shipyard&#x60; trait to use. Send a ship to the waypoint to access data on ships that are currently available for purchase and recent transactions.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemSymbol">The system symbol</param>
        /// <param name="waypointSymbol">The waypoint symbol</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetShipyard200Response</returns>
        public ApiResponse<GetShipyard200Response> GetShipyardWithHttpInfo(string systemSymbol, string waypointSymbol, int operationIndex = 0)
        {
            // verify the required parameter 'systemSymbol' is set
            if (systemSymbol == null)
            {
                throw new ApiException(400, "Missing required parameter 'systemSymbol' when calling SystemsApi->GetShipyard");
            }

            // verify the required parameter 'waypointSymbol' is set
            if (waypointSymbol == null)
            {
                throw new ApiException(400, "Missing required parameter 'waypointSymbol' when calling SystemsApi->GetShipyard");
            }

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = Array.Empty<string>();

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SpaceTraders.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SpaceTraders.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("systemSymbol", SpaceTraders.Client.ClientUtils.ParameterToString(systemSymbol)); // path parameter
            localVarRequestOptions.PathParameters.Add("waypointSymbol", SpaceTraders.Client.ClientUtils.ParameterToString(waypointSymbol)); // path parameter

            localVarRequestOptions.Operation = "SystemsApi.GetShipyard";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (AgentToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetShipyard200Response>("/systems/{systemSymbol}/waypoints/{waypointSymbol}/shipyard", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetShipyard", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Shipyard Get the shipyard for a waypoint. Requires a waypoint that has the &#x60;Shipyard&#x60; trait to use. Send a ship to the waypoint to access data on ships that are currently available for purchase and recent transactions.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemSymbol">The system symbol</param>
        /// <param name="waypointSymbol">The waypoint symbol</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetShipyard200Response</returns>
        public async System.Threading.Tasks.Task<GetShipyard200Response> GetShipyardAsync(string systemSymbol, string waypointSymbol, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            ApiResponse<GetShipyard200Response> localVarResponse = await GetShipyardWithHttpInfoAsync(systemSymbol, waypointSymbol, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Shipyard Get the shipyard for a waypoint. Requires a waypoint that has the &#x60;Shipyard&#x60; trait to use. Send a ship to the waypoint to access data on ships that are currently available for purchase and recent transactions.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemSymbol">The system symbol</param>
        /// <param name="waypointSymbol">The waypoint symbol</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetShipyard200Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetShipyard200Response>> GetShipyardWithHttpInfoAsync(string systemSymbol, string waypointSymbol, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'systemSymbol' is set
            if (systemSymbol == null)
            {
                throw new ApiException(400, "Missing required parameter 'systemSymbol' when calling SystemsApi->GetShipyard");
            }

            // verify the required parameter 'waypointSymbol' is set
            if (waypointSymbol == null)
            {
                throw new ApiException(400, "Missing required parameter 'waypointSymbol' when calling SystemsApi->GetShipyard");
            }

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = Array.Empty<string>();

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SpaceTraders.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SpaceTraders.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("systemSymbol", SpaceTraders.Client.ClientUtils.ParameterToString(systemSymbol)); // path parameter
            localVarRequestOptions.PathParameters.Add("waypointSymbol", SpaceTraders.Client.ClientUtils.ParameterToString(waypointSymbol)); // path parameter

            localVarRequestOptions.Operation = "SystemsApi.GetShipyard";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (AgentToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetShipyard200Response>("/systems/{systemSymbol}/waypoints/{waypointSymbol}/shipyard", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetShipyard", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get System Get the details of a system.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemSymbol">The system symbol</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetSystem200Response</returns>
        public GetSystem200Response GetSystem(string systemSymbol, int operationIndex = 0)
        {
            ApiResponse<GetSystem200Response> localVarResponse = GetSystemWithHttpInfo(systemSymbol);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get System Get the details of a system.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemSymbol">The system symbol</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetSystem200Response</returns>
        public ApiResponse<GetSystem200Response> GetSystemWithHttpInfo(string systemSymbol, int operationIndex = 0)
        {
            // verify the required parameter 'systemSymbol' is set
            if (systemSymbol == null)
            {
                throw new ApiException(400, "Missing required parameter 'systemSymbol' when calling SystemsApi->GetSystem");
            }

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = Array.Empty<string>();

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SpaceTraders.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SpaceTraders.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("systemSymbol", SpaceTraders.Client.ClientUtils.ParameterToString(systemSymbol)); // path parameter

            localVarRequestOptions.Operation = "SystemsApi.GetSystem";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (AgentToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetSystem200Response>("/systems/{systemSymbol}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSystem", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get System Get the details of a system.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemSymbol">The system symbol</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetSystem200Response</returns>
        public async System.Threading.Tasks.Task<GetSystem200Response> GetSystemAsync(string systemSymbol, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            ApiResponse<GetSystem200Response> localVarResponse = await GetSystemWithHttpInfoAsync(systemSymbol, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get System Get the details of a system.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemSymbol">The system symbol</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetSystem200Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetSystem200Response>> GetSystemWithHttpInfoAsync(string systemSymbol, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'systemSymbol' is set
            if (systemSymbol == null)
            {
                throw new ApiException(400, "Missing required parameter 'systemSymbol' when calling SystemsApi->GetSystem");
            }

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = Array.Empty<string>();

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SpaceTraders.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SpaceTraders.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("systemSymbol", SpaceTraders.Client.ClientUtils.ParameterToString(systemSymbol)); // path parameter

            localVarRequestOptions.Operation = "SystemsApi.GetSystem";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (AgentToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetSystem200Response>("/systems/{systemSymbol}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSystem", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Waypoints in System Return a paginated list of all of the waypoints for a given system.  If a waypoint is uncharted, it will return the &#x60;Uncharted&#x60; trait instead of its actual traits.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemSymbol">The system symbol</param>
        /// <param name="page">What entry offset to request (optional, default to 1)</param>
        /// <param name="limit">How many entries to return per page (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetSystemWaypoints200Response</returns>
        public GetSystemWaypoints200Response GetSystemWaypoints(string systemSymbol, int? page = default, int? limit = default, int operationIndex = 0)
        {
            ApiResponse<GetSystemWaypoints200Response> localVarResponse = GetSystemWaypointsWithHttpInfo(systemSymbol, page, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Waypoints in System Return a paginated list of all of the waypoints for a given system.  If a waypoint is uncharted, it will return the &#x60;Uncharted&#x60; trait instead of its actual traits.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemSymbol">The system symbol</param>
        /// <param name="page">What entry offset to request (optional, default to 1)</param>
        /// <param name="limit">How many entries to return per page (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetSystemWaypoints200Response</returns>
        public ApiResponse<GetSystemWaypoints200Response> GetSystemWaypointsWithHttpInfo(string systemSymbol, int? page = default, int? limit = default, int operationIndex = 0)
        {
            // verify the required parameter 'systemSymbol' is set
            if (systemSymbol == null)
            {
                throw new ApiException(400, "Missing required parameter 'systemSymbol' when calling SystemsApi->GetSystemWaypoints");
            }

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = Array.Empty<string>();

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SpaceTraders.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SpaceTraders.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("systemSymbol", SpaceTraders.Client.ClientUtils.ParameterToString(systemSymbol)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(SpaceTraders.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(SpaceTraders.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "SystemsApi.GetSystemWaypoints";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (AgentToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetSystemWaypoints200Response>("/systems/{systemSymbol}/waypoints", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSystemWaypoints", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Waypoints in System Return a paginated list of all of the waypoints for a given system.  If a waypoint is uncharted, it will return the &#x60;Uncharted&#x60; trait instead of its actual traits.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemSymbol">The system symbol</param>
        /// <param name="page">What entry offset to request (optional, default to 1)</param>
        /// <param name="limit">How many entries to return per page (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetSystemWaypoints200Response</returns>
        public async System.Threading.Tasks.Task<GetSystemWaypoints200Response> GetSystemWaypointsAsync(string systemSymbol, int? page = default, int? limit = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            ApiResponse<GetSystemWaypoints200Response> localVarResponse = await GetSystemWaypointsWithHttpInfoAsync(systemSymbol, page, limit, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Waypoints in System Return a paginated list of all of the waypoints for a given system.  If a waypoint is uncharted, it will return the &#x60;Uncharted&#x60; trait instead of its actual traits.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemSymbol">The system symbol</param>
        /// <param name="page">What entry offset to request (optional, default to 1)</param>
        /// <param name="limit">How many entries to return per page (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetSystemWaypoints200Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetSystemWaypoints200Response>> GetSystemWaypointsWithHttpInfoAsync(string systemSymbol, int? page = default, int? limit = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'systemSymbol' is set
            if (systemSymbol == null)
            {
                throw new ApiException(400, "Missing required parameter 'systemSymbol' when calling SystemsApi->GetSystemWaypoints");
            }

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = Array.Empty<string>();

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SpaceTraders.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SpaceTraders.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("systemSymbol", SpaceTraders.Client.ClientUtils.ParameterToString(systemSymbol)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(SpaceTraders.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(SpaceTraders.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "SystemsApi.GetSystemWaypoints";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (AgentToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetSystemWaypoints200Response>("/systems/{systemSymbol}/waypoints", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSystemWaypoints", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Systems Return a paginated list of all systems.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">What entry offset to request (optional, default to 1)</param>
        /// <param name="limit">How many entries to return per page (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetSystems200Response</returns>
        public GetSystems200Response GetSystems(int? page = default, int? limit = default, int operationIndex = 0)
        {
            ApiResponse<GetSystems200Response> localVarResponse = GetSystemsWithHttpInfo(page, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Systems Return a paginated list of all systems.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">What entry offset to request (optional, default to 1)</param>
        /// <param name="limit">How many entries to return per page (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetSystems200Response</returns>
        public ApiResponse<GetSystems200Response> GetSystemsWithHttpInfo(int? page = default, int? limit = default, int operationIndex = 0)
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = Array.Empty<string>();

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SpaceTraders.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SpaceTraders.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(SpaceTraders.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(SpaceTraders.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "SystemsApi.GetSystems";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (AgentToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetSystems200Response>("/systems", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSystems", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Systems Return a paginated list of all systems.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">What entry offset to request (optional, default to 1)</param>
        /// <param name="limit">How many entries to return per page (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetSystems200Response</returns>
        public async System.Threading.Tasks.Task<GetSystems200Response> GetSystemsAsync(int? page = default, int? limit = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            ApiResponse<GetSystems200Response> localVarResponse = await GetSystemsWithHttpInfoAsync(page, limit, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Systems Return a paginated list of all systems.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">What entry offset to request (optional, default to 1)</param>
        /// <param name="limit">How many entries to return per page (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetSystems200Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetSystems200Response>> GetSystemsWithHttpInfoAsync(int? page = default, int? limit = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = Array.Empty<string>();

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SpaceTraders.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SpaceTraders.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(SpaceTraders.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(SpaceTraders.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "SystemsApi.GetSystems";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (AgentToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetSystems200Response>("/systems", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSystems", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Waypoint View the details of a waypoint.  If the waypoint is uncharted, it will return the &#39;Uncharted&#39; trait instead of its actual traits.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemSymbol">The system symbol</param>
        /// <param name="waypointSymbol">The waypoint symbol</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetWaypoint200Response</returns>
        public GetWaypoint200Response GetWaypoint(string systemSymbol, string waypointSymbol, int operationIndex = 0)
        {
            ApiResponse<GetWaypoint200Response> localVarResponse = GetWaypointWithHttpInfo(systemSymbol, waypointSymbol);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Waypoint View the details of a waypoint.  If the waypoint is uncharted, it will return the &#39;Uncharted&#39; trait instead of its actual traits.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemSymbol">The system symbol</param>
        /// <param name="waypointSymbol">The waypoint symbol</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetWaypoint200Response</returns>
        public ApiResponse<GetWaypoint200Response> GetWaypointWithHttpInfo(string systemSymbol, string waypointSymbol, int operationIndex = 0)
        {
            // verify the required parameter 'systemSymbol' is set
            if (systemSymbol == null)
            {
                throw new ApiException(400, "Missing required parameter 'systemSymbol' when calling SystemsApi->GetWaypoint");
            }

            // verify the required parameter 'waypointSymbol' is set
            if (waypointSymbol == null)
            {
                throw new ApiException(400, "Missing required parameter 'waypointSymbol' when calling SystemsApi->GetWaypoint");
            }

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = Array.Empty<string>();

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SpaceTraders.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SpaceTraders.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("systemSymbol", SpaceTraders.Client.ClientUtils.ParameterToString(systemSymbol)); // path parameter
            localVarRequestOptions.PathParameters.Add("waypointSymbol", SpaceTraders.Client.ClientUtils.ParameterToString(waypointSymbol)); // path parameter

            localVarRequestOptions.Operation = "SystemsApi.GetWaypoint";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (AgentToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetWaypoint200Response>("/systems/{systemSymbol}/waypoints/{waypointSymbol}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWaypoint", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Waypoint View the details of a waypoint.  If the waypoint is uncharted, it will return the &#39;Uncharted&#39; trait instead of its actual traits.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemSymbol">The system symbol</param>
        /// <param name="waypointSymbol">The waypoint symbol</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetWaypoint200Response</returns>
        public async System.Threading.Tasks.Task<GetWaypoint200Response> GetWaypointAsync(string systemSymbol, string waypointSymbol, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            ApiResponse<GetWaypoint200Response> localVarResponse = await GetWaypointWithHttpInfoAsync(systemSymbol, waypointSymbol, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Waypoint View the details of a waypoint.  If the waypoint is uncharted, it will return the &#39;Uncharted&#39; trait instead of its actual traits.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="systemSymbol">The system symbol</param>
        /// <param name="waypointSymbol">The waypoint symbol</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetWaypoint200Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetWaypoint200Response>> GetWaypointWithHttpInfoAsync(string systemSymbol, string waypointSymbol, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'systemSymbol' is set
            if (systemSymbol == null)
            {
                throw new ApiException(400, "Missing required parameter 'systemSymbol' when calling SystemsApi->GetWaypoint");
            }

            // verify the required parameter 'waypointSymbol' is set
            if (waypointSymbol == null)
            {
                throw new ApiException(400, "Missing required parameter 'waypointSymbol' when calling SystemsApi->GetWaypoint");
            }

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = Array.Empty<string>();

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SpaceTraders.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SpaceTraders.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("systemSymbol", SpaceTraders.Client.ClientUtils.ParameterToString(systemSymbol)); // path parameter
            localVarRequestOptions.PathParameters.Add("waypointSymbol", SpaceTraders.Client.ClientUtils.ParameterToString(waypointSymbol)); // path parameter

            localVarRequestOptions.Operation = "SystemsApi.GetWaypoint";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (AgentToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetWaypoint200Response>("/systems/{systemSymbol}/waypoints/{waypointSymbol}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWaypoint", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }
    }
}
