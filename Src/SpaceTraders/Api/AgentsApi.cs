/*
 * SpaceTraders API
 *
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using SpaceTraders.Client;
using SpaceTraders.Model;
using System;

namespace SpaceTraders.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAgentsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Public Agent
        /// </summary>
        /// <remarks>
        /// Fetch agent details.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentSymbol">The agent symbol</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetMyAgent200Response</returns>
        GetMyAgent200Response GetAgent(string agentSymbol, int operationIndex = 0);

        /// <summary>
        /// Get Public Agent
        /// </summary>
        /// <remarks>
        /// Fetch agent details.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentSymbol">The agent symbol</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetMyAgent200Response</returns>
        ApiResponse<GetMyAgent200Response> GetAgentWithHttpInfo(string agentSymbol, int operationIndex = 0);
        /// <summary>
        /// List Agents
        /// </summary>
        /// <remarks>
        /// Fetch agents details.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">What entry offset to request (optional, default to 1)</param>
        /// <param name="limit">How many entries to return per page (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetAgents200Response</returns>
        GetAgents200Response GetAgents(int? page = default, int? limit = default, int operationIndex = 0);

        /// <summary>
        /// List Agents
        /// </summary>
        /// <remarks>
        /// Fetch agents details.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">What entry offset to request (optional, default to 1)</param>
        /// <param name="limit">How many entries to return per page (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetAgents200Response</returns>
        ApiResponse<GetAgents200Response> GetAgentsWithHttpInfo(int? page = default, int? limit = default, int operationIndex = 0);
        /// <summary>
        /// Get Agent
        /// </summary>
        /// <remarks>
        /// Fetch your agent&#39;s details.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetMyAgent200Response</returns>
        GetMyAgent200Response GetMyAgent(int operationIndex = 0);

        /// <summary>
        /// Get Agent
        /// </summary>
        /// <remarks>
        /// Fetch your agent&#39;s details.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetMyAgent200Response</returns>
        ApiResponse<GetMyAgent200Response> GetMyAgentWithHttpInfo(int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAgentsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get Public Agent
        /// </summary>
        /// <remarks>
        /// Fetch agent details.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentSymbol">The agent symbol</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetMyAgent200Response</returns>
        System.Threading.Tasks.Task<GetMyAgent200Response> GetAgentAsync(string agentSymbol, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Public Agent
        /// </summary>
        /// <remarks>
        /// Fetch agent details.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentSymbol">The agent symbol</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetMyAgent200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetMyAgent200Response>> GetAgentWithHttpInfoAsync(string agentSymbol, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// List Agents
        /// </summary>
        /// <remarks>
        /// Fetch agents details.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">What entry offset to request (optional, default to 1)</param>
        /// <param name="limit">How many entries to return per page (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetAgents200Response</returns>
        System.Threading.Tasks.Task<GetAgents200Response> GetAgentsAsync(int? page = default, int? limit = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List Agents
        /// </summary>
        /// <remarks>
        /// Fetch agents details.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">What entry offset to request (optional, default to 1)</param>
        /// <param name="limit">How many entries to return per page (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetAgents200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAgents200Response>> GetAgentsWithHttpInfoAsync(int? page = default, int? limit = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get Agent
        /// </summary>
        /// <remarks>
        /// Fetch your agent&#39;s details.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetMyAgent200Response</returns>
        System.Threading.Tasks.Task<GetMyAgent200Response> GetMyAgentAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Agent
        /// </summary>
        /// <remarks>
        /// Fetch your agent&#39;s details.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetMyAgent200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetMyAgent200Response>> GetMyAgentWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAgentsApi : IAgentsApiSync, IAgentsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AgentsApi : IAgentsApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AgentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AgentsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AgentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AgentsApi(string basePath)
        {
            this.Configuration = SpaceTraders.Client.Configuration.MergeConfigurations(
                SpaceTraders.Client.GlobalConfiguration.Instance,
                new Configuration { BasePath = basePath }
            );
            this.Client = new ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = SpaceTraders.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AgentsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AgentsApi(Configuration configuration)
        {
            ArgumentNullException.ThrowIfNull(configuration);

            this.Configuration = SpaceTraders.Client.Configuration.MergeConfigurations(
                SpaceTraders.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ApiClient(this.Configuration.BasePath);
            ExceptionFactory = SpaceTraders.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AgentsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public AgentsApi(ISynchronousClient client, IAsynchronousClient asyncClient, IReadableConfiguration configuration)
        {
            ArgumentNullException.ThrowIfNull(client);
            ArgumentNullException.ThrowIfNull(asyncClient);
            ArgumentNullException.ThrowIfNull(configuration);

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = SpaceTraders.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }

                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get Public Agent Fetch agent details.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentSymbol">The agent symbol</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetMyAgent200Response</returns>
        public GetMyAgent200Response GetAgent(string agentSymbol, int operationIndex = 0)
        {
            ApiResponse<GetMyAgent200Response> localVarResponse = GetAgentWithHttpInfo(agentSymbol);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Public Agent Fetch agent details.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentSymbol">The agent symbol</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetMyAgent200Response</returns>
        public ApiResponse<GetMyAgent200Response> GetAgentWithHttpInfo(string agentSymbol, int operationIndex = 0)
        {
            // verify the required parameter 'agentSymbol' is set
            if (agentSymbol == null)
            {
                throw new ApiException(400, "Missing required parameter 'agentSymbol' when calling AgentsApi->GetAgent");
            }

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = [];

            // to determine the Accept header
            string[] _accepts = [
                "application/json"
            ];

            var localVarContentType = SpaceTraders.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SpaceTraders.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("agentSymbol", SpaceTraders.Client.ClientUtils.ParameterToString(agentSymbol)); // path parameter

            localVarRequestOptions.Operation = "AgentsApi.GetAgent";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (AgentToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetMyAgent200Response>("/agents/{agentSymbol}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAgent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Public Agent Fetch agent details.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentSymbol">The agent symbol</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetMyAgent200Response</returns>
        public async System.Threading.Tasks.Task<GetMyAgent200Response> GetAgentAsync(string agentSymbol, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            ApiResponse<GetMyAgent200Response> localVarResponse = await GetAgentWithHttpInfoAsync(agentSymbol, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Public Agent Fetch agent details.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="agentSymbol">The agent symbol</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetMyAgent200Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetMyAgent200Response>> GetAgentWithHttpInfoAsync(string agentSymbol, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'agentSymbol' is set
            if (agentSymbol == null)
            {
                throw new ApiException(400, "Missing required parameter 'agentSymbol' when calling AgentsApi->GetAgent");
            }

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = [];

            // to determine the Accept header
            string[] _accepts = [
                "application/json"
            ];

            var localVarContentType = SpaceTraders.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SpaceTraders.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("agentSymbol", SpaceTraders.Client.ClientUtils.ParameterToString(agentSymbol)); // path parameter

            localVarRequestOptions.Operation = "AgentsApi.GetAgent";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (AgentToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetMyAgent200Response>("/agents/{agentSymbol}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAgent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Agents Fetch agents details.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">What entry offset to request (optional, default to 1)</param>
        /// <param name="limit">How many entries to return per page (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetAgents200Response</returns>
        public GetAgents200Response GetAgents(int? page = default, int? limit = default, int operationIndex = 0)
        {
            ApiResponse<GetAgents200Response> localVarResponse = GetAgentsWithHttpInfo(page, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Agents Fetch agents details.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">What entry offset to request (optional, default to 1)</param>
        /// <param name="limit">How many entries to return per page (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetAgents200Response</returns>
        public ApiResponse<GetAgents200Response> GetAgentsWithHttpInfo(int? page = default, int? limit = default, int operationIndex = 0)
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = [];

            // to determine the Accept header
            string[] _accepts = [
                "application/json"
            ];

            var localVarContentType = SpaceTraders.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SpaceTraders.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(SpaceTraders.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(SpaceTraders.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "AgentsApi.GetAgents";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (AgentToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetAgents200Response>("/agents", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAgents", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Agents Fetch agents details.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">What entry offset to request (optional, default to 1)</param>
        /// <param name="limit">How many entries to return per page (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetAgents200Response</returns>
        public async System.Threading.Tasks.Task<GetAgents200Response> GetAgentsAsync(int? page = default, int? limit = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            ApiResponse<GetAgents200Response> localVarResponse = await GetAgentsWithHttpInfoAsync(page, limit, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Agents Fetch agents details.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">What entry offset to request (optional, default to 1)</param>
        /// <param name="limit">How many entries to return per page (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetAgents200Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetAgents200Response>> GetAgentsWithHttpInfoAsync(int? page = default, int? limit = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = [];

            // to determine the Accept header
            string[] _accepts = [
                "application/json"
            ];

            var localVarContentType = SpaceTraders.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SpaceTraders.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(SpaceTraders.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(SpaceTraders.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "AgentsApi.GetAgents";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (AgentToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetAgents200Response>("/agents", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAgents", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Agent Fetch your agent&#39;s details.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetMyAgent200Response</returns>
        public GetMyAgent200Response GetMyAgent(int operationIndex = 0)
        {
            ApiResponse<GetMyAgent200Response> localVarResponse = GetMyAgentWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Agent Fetch your agent&#39;s details.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetMyAgent200Response</returns>
        public ApiResponse<GetMyAgent200Response> GetMyAgentWithHttpInfo(int operationIndex = 0)
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = [];

            // to determine the Accept header
            string[] _accepts = [
                "application/json"
            ];

            var localVarContentType = SpaceTraders.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SpaceTraders.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Operation = "AgentsApi.GetMyAgent";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (AgentToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetMyAgent200Response>("/my/agent", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMyAgent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Agent Fetch your agent&#39;s details.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetMyAgent200Response</returns>
        public async System.Threading.Tasks.Task<GetMyAgent200Response> GetMyAgentAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            ApiResponse<GetMyAgent200Response> localVarResponse = await GetMyAgentWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Agent Fetch your agent&#39;s details.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetMyAgent200Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetMyAgent200Response>> GetMyAgentWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = [];

            // to determine the Accept header
            string[] _accepts = [
                "application/json"
            ];

            var localVarContentType = SpaceTraders.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SpaceTraders.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Operation = "AgentsApi.GetMyAgent";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (AgentToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetMyAgent200Response>("/my/agent", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMyAgent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }
    }
}
