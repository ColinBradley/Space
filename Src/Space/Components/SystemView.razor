@using Space.Helpers;
@using Space.Models;
@using SpaceTraders.Api;
@using SpaceTraders.Model;

@implements IDisposable;

@inject SpaceApplication Application;
@inject NavigationManager NavigationManager;
@inject IJSRuntime JSRuntime;

<div class="panel" style="display: @(this.System == null? "none": "flex"); flex-direction: column; gap: 1em;">
    <h2>Waypoints</h2>

    <div style="display: grid;gap: 1em;grid-auto-flow: dense;grid-template-columns: repeat(auto-fill, minmax(15em, 1fr));">
        @{
            this.NavigationManager.TryGetQueryString(Navigation.SELECTED_WAYPOINT_QUERY_STRING_KEY, out var selectedWaypoint);
        }
        @foreach (var waypoint in this.System?.Waypoints.Values.Select(o => o.Value) ?? Array.Empty<Waypoint>())
        {
            var isSelectedClass = waypoint.Symbol == selectedWaypoint ? "selected" : string.Empty;

            <div class="waypoint panel @isSelectedClass">
                <div class="head">
                    <a title="@waypoint.Faction.Symbol"
                       href=@this.NavigationManager.GetUriWithQueryParameter(Navigation.SELECTED_WAYPOINT_QUERY_STRING_KEY, waypoint.Symbol)>
                        @(new WaypointLocation(waypoint.Symbol).Waypoint)
                    </a>
                    <div>@SystemModel.GetHumanName(waypoint.Type)</div>
                </div>

                <ul>
                    @foreach (var trait in waypoint.Traits)
                    {
                        <li title=@trait.Description>@trait.Name</li>
                    }
                </ul>

                @{
                    var ships = this.Application.Ships.Values.Where(s => s.Value.Nav.WaypointSymbol == waypoint.Symbol).ToArray();

                    if (ships.Length > 0)
                    {
                        <details>
                            <summary>Ships (@ships.Length)</summary>
                            <ul>
                                @foreach (var ship in ships)
                                {
                                    <li>
                                        <ShipCardView Ship=@ship ShowLocation=false ShowCrew=false />
                                    </li>
                                }
                            </ul>
                        </details>
                    }
                }
            </div>
        }
    </div>

    <div class="panel">
        <h2>Map</h2>
        <canvas @ref="mRenderCanvas" width="500" height="600" style="width: 100%; height: 600px;" />
    </div>
</div>

<style>
    .waypoint {
        gap: 0;
    }

        .waypoint .head {
            display: flex;
            justify-content: space-between;
            gap: 1em;
        }

        .waypoint.selected {
            border-color: var(--selection-color);
            box-shadow: 0 0 .2em .1em var(--selection-color);
        }
</style>

@code {
    private ElementReference mRenderCanvas;
    private bool mIs3DReady = false;
    private IJSObjectReference? mMapModule;

    private SystemModel? mSystem = null;

    [Parameter]
    public SystemModel? System { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        this.NavigationManager.LocationChanged += this.NavigationManager_LocationChanged;
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        // I want to do this in the setter of the parameter.
        // But Blazor gives a warning that it might cause side effects ¬_¬ (BL0007)
        if (this.System == mSystem)
        {
            return;
        }

        if (mSystem is not null)
        {
            mSystem.Changed -= this.System_Changed;
        }

        mSystem = this.System;

        if (mSystem is not null)
        {
            mSystem.Changed += this.System_Changed;

            _ = this.SendWaypointsToClient();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (!firstRender)
        {
            return;
        }

        mMapModule =
            await this.JSRuntime.InvokeAsync<IJSObjectReference>(
                "import",
                "./js/map.js");

        await mMapModule.InvokeVoidAsync("initialize", mRenderCanvas);

        mIs3DReady = true;

        await this.SendWaypointsToClient();
    }

    private async Task SendWaypointsToClient()
    {
        if (!mIs3DReady || mSystem is null)
        {
            return;
        }

        var waypoints = mSystem.Waypoints.Values.Select(o => o.Value).ToArray();
        await mMapModule!.InvokeVoidAsync("setWaypoints", new[] { waypoints });
    }

    private void System_Changed()
    {
        this.InvokeAsync(async () =>
        {
            this.StateHasChanged();
            await this.SendWaypointsToClient();
        });
    }

    private void NavigationManager_LocationChanged(object? sender, LocationChangedEventArgs e)
    {
        // State doesn't update when the query string changes, so we need to force it
        this.StateHasChanged();
    }

    void IDisposable.Dispose()
    {
        if (mSystem is not null)
        {
            mSystem.Changed -= this.System_Changed;
        }

        this.NavigationManager.LocationChanged -= this.NavigationManager_LocationChanged;
    }
}
