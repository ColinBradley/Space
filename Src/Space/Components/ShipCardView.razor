@using Space.Helpers;
@using Space.Models;
@using SpaceTraders.Api;
@using SpaceTraders.Model;

@implements IDisposable;

@inject NavigationManager NavigationManager;

@{
    if (this.ShipModel == null)
    {
        return;
    }

    var isSelectedClass =
        this.NavigationManager.TryGetQueryString(Navigation.SELECTED_SHIP_QUERY_STRING_KEY, out var selectedShip) &&
        selectedShip == this.ShipModel.Ship.Registration.Name ? "selected" : null;
}

<div class="panel ship @isSelectedClass">
    <span>
        <a href=@this.NavigationManager.GetUriWithQueryParameter(Navigation.SELECTED_SHIP_QUERY_STRING_KEY, this.ShipModel.Ship.Registration.Name)>
            @this.ShipModel.Ship.Symbol
        </a>
        <span title="@this.ShipModel.Ship.Frame.Description">(@this.ShipModel.Ship.Registration.Role-@this.ShipModel.Ship.Frame.Symbol)</span>
    </span>

    @if (this.ShowFuel && this.ShipModel.Ship.Fuel.Capacity > 0)
    {
        <div>Fuel: @this.ShipModel.Ship.Fuel.Current / @this.ShipModel.Ship.Fuel.Capacity</div>
    }

    @if (this.ShipModel.Ship.Cargo.Capacity > 0)
    {
        <div>Cargo: @this.ShipModel.Ship.Cargo.Units / @this.ShipModel.Ship.Cargo.Capacity</div>
    }

    @if (this.ShowCrew && this.ShipModel.Ship.Crew.Capacity > 0)
    {
        <div>Crew: @this.ShipModel.Ship.Crew.Current / @this.ShipModel.Ship.Crew.Capacity</div>
        if (this.ShowCrewMorale)
        {
            <div>Crew Morale: @this.ShipModel.Ship.Crew.Morale%</div>
        }
    }

    @{
        var cooldown = this.ShipModel.CooldownTimeLeft();
        @if (cooldown.HasValue)
        {
            <div>Cooldown: @cooldown.Value.ToString(@"hh\:mm\:ss")</div>
        }
    }

    @if (this.ShowLocation)
    {
        <div>
            Location:
            <a href=@this.NavigationManager.GetUriWithQueryParameter(Navigation.SELECTED_WAYPOINT_QUERY_STRING_KEY, this.ShipModel.Ship.Nav.WaypointSymbol)>
                @this.ShipModel.Ship.Nav.WaypointSymbol
            </a>
        </div>
    }
</div>

<style>
    .ship {
        display: flex;
        flex-direction: column;
        gap: 0;
    }

        .ship.selected {
            border-color: var(--selection-color);
            box-shadow: 0 0 .2em .1em var(--selection-color);
        }
</style>

@code {
    [Parameter]
    public ShipModel? ShipModel { get; set; }

    [Parameter]
    public bool ShowLocation { get; set; } = true;

    [Parameter]
    public bool ShowCrew { get; set; } = true;

    [Parameter]
    public bool ShowCrewMorale { get; set; } = false;

    [Parameter]
    public bool ShowFuel { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        if (this.ShipModel != null)
        {
            this.ShipModel.Changed += this.Ship_Changed;
        }

        this.NavigationManager.LocationChanged += this.NavigationManager_LocationChanged;
    }

    private void Ship_Changed()
    {
        this.InvokeAsync(this.StateHasChanged);
    }

    private void NavigationManager_LocationChanged(object? sender, LocationChangedEventArgs e)
    {
        // State doesn't update when the query string changes, so we need to force it
        this.StateHasChanged();
    }

    void IDisposable.Dispose()
    {
        if (this.ShipModel != null)
        {
            this.ShipModel.Changed -= this.Ship_Changed;
        }

        this.NavigationManager.LocationChanged -= this.NavigationManager_LocationChanged;
    }
}
