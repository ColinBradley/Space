@using Space.Helpers;
@using Space.Models;
@using SpaceTraders.Api;
@using SpaceTraders.Model;

@implements IDisposable;

@inject NavigationManager NavigationManager;

@{
    if (this.Ship == null)
    {
        return;
    }
}

<div class="panel" style="display: grid; grid-template-columns: auto minmax(0, 1fr);">
    <div>
        <h2>@this.Ship.Value.Symbol</h2>

        <div title="@this.Ship.Value.Frame.Description">
            @this.Ship.Value.Registration.Role-@this.Ship.Value.Frame.Symbol
        </div>
        <div>Module Slots: @this.Ship.Value.Frame.ModuleSlots</div>
        <div>Mounting Points: @this.Ship.Value.Frame.MountingPoints</div>
        <div>Frame Condition: @this.Ship.Value.Frame.Condition%</div>

        <div>Fuel: @this.Ship.Value.Fuel.Current / @this.Ship.Value.Fuel.Capacity</div>
        <div title=@this.Ship.Value.Reactor.Description>Reactor: @this.Ship.Value.Reactor.Name</div>
        <div>Reactor Power Out: @this.Ship.Value.Reactor.PowerOutput</div>
        <div>Reactor Condition: @this.Ship.Value.Reactor.Condition%</div>
        <div title=@this.Ship.Value.Engine.Description>Engine: @this.Ship.Value.Engine.Name</div>
        <div>Engine Speed: @this.Ship.Value.Engine.Speed</div>
        <div>Engine Condition: @this.Ship.Value.Engine.Condition%</div>

        <div>Crew: @this.Ship.Value.Crew.Current / @this.Ship.Value.Crew.Capacity</div>
        <div>Crew Morale: @this.Ship.Value.Crew.Morale%</div>
        <div>
            Location:
            <a href=@this.NavigationManager.GetUriWithQueryParameter(Navigation.SELECTED_WAYPOINT_QUERY_STRING_KEY, this.Ship.Value.Nav.WaypointSymbol)>
                @this.Ship.Value.Nav.WaypointSymbol
            </a>
        </div>
        <div>
            Status: @this.Ship.Value.Nav.Status
        </div>
    </div>
    <div class="panel">
        <div>Cargo: @this.Ship.Value.Cargo.Units / @this.Ship.Value.Cargo.Capacity</div>
        <div class="panel" style="display: flex; flex-wrap: wrap; gap: 1em;">
            @foreach (var item in this.Ship.Value.Cargo.Inventory)
            {
                <div class="item" title=@item.Description>
                    <div>@item.Name</div>
                    <div>@item.Units</div>
                </div>
            }
        </div>
    </div>
    <div class="actions">
        @if (this.NavigationManager.TryGetQueryString(Navigation.SELECTED_WAYPOINT_QUERY_STRING_KEY, out var selectedWaypoint) &&
        this.Ship.Value.Nav.WaypointSymbol != @selectedWaypoint)
        {
            <button>Travel to @selectedWaypoint</button>
        }
    </div>
</div>

<style>
    .item {
        width: 10em;
        height: 10em;
    }
</style>

@code {
    [Parameter]
    public Observable<Ship>? Ship { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        if (this.Ship != null)
        {
            this.Ship.Changed += this.Ship_Changed;
        }

        this.NavigationManager.LocationChanged += this.NavigationManager_LocationChanged;
    }

    private void Ship_Changed(Observable<Ship> observable)
    {
        this.InvokeAsync(this.StateHasChanged);
    }

    private void NavigationManager_LocationChanged(object? sender, LocationChangedEventArgs e)
    {
        // State doesn't update when the query string changes, so we need to force it
        this.StateHasChanged();
    }

    void IDisposable.Dispose()
    {
        if (this.Ship != null)
        {
            this.Ship.Changed -= this.Ship_Changed;
        }

        this.NavigationManager.LocationChanged -= this.NavigationManager_LocationChanged;
    }
}
