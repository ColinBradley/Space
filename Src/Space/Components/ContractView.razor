@using Space.Helpers;
@using Space.Models;
@using SpaceTraders.Api;
@using SpaceTraders.Client;
@using SpaceTraders.Model;

@implements IDisposable;

@inject Configuration Config;
@inject SpaceApplication Application;
@inject NavigationManager NavigationManager;

@if (this.Contract == null)
{
    return;
}

<div class="panel" style="gap: 1em;">
    <div>
        <div>@this.Contract.Value.Type</div>
        <div>Accepted: @this.Contract.Value.Accepted</div>
        <div>Deadline: @(this.Contract.Value.Accepted ? this.Contract.Value.Terms.Deadline : this.Contract.Value.DeadlineToAccept)</div>
        <div>Payment: @(this.Contract.Value.Terms.Payment.OnAccepted)u + @(this.Contract.Value.Terms.Payment.OnFulfilled)u</div>
    </div>
    <details open>
        <summary>Contract</summary>
        <ul>
            @foreach (var delivery in this.Contract.Value.Terms.Deliver)
            {
                <li>
                    Deliver: @delivery.UnitsFulfilled/@delivery.UnitsRequired @delivery.TradeSymbol to
                    <a href=@this.NavigationManager.GetUriWithQueryParameter(Navigation.SELECTED_WAYPOINT_QUERY_STRING_KEY, delivery.DestinationSymbol)>
                        @delivery.DestinationSymbol
                    </a>
                </li>
            }
        </ul>
    </details>

    @if (!this.Contract.Value.Accepted)
    {
        <button @onclick=this.AcceptButton_Click>Accept</button>
    }
</div>

@code {
    [Parameter]
    public Observable<Contract>? Contract { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        this.NavigationManager.LocationChanged += this.NavigationManager_LocationChanged;

        if (this.Contract != null)
        {
            this.Contract.Changed += this.Contract_Changed;
        }
    }

    private async Task AcceptButton_Click()
    {
        if (this.Contract == null)
        {
            return;
        }

        var result = await new ContractsApi(this.Config).AcceptContractAsync(this.Contract.Value.Id);
        if (result is null)
        {
            return;
        }

        this.Contract.Value = result.Data.Contract;
        this.Application.Agent.Value = result.Data.Agent;
    }

    private void Contract_Changed(Observable<Contract> observable)
    {
        this.InvokeAsync(this.StateHasChanged);
    }

    private void NavigationManager_LocationChanged(object? sender, LocationChangedEventArgs e)
    {
        this.InvokeAsync(this.StateHasChanged);
    }

    void IDisposable.Dispose()
    {
        this.NavigationManager.LocationChanged -= this.NavigationManager_LocationChanged;

        if (this.Contract != null)
        {
            this.Contract.Changed -= this.Contract_Changed;
        }
    }
}
