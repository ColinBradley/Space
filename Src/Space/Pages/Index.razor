@page "/";

@using Microsoft.AspNetCore.WebUtilities;
@using Space.Components
@using Space.Helpers;
@using Space.Models;
@using SpaceTraders.Model;

@inherits SpaceComponentBase;

<PageTitle>Space</PageTitle>

<div style="display:flex; flex-direction:column; gap:1em; padding:1em;">
    <div style="display:flex; justify-content:space-between; position:sticky; top:0; background:linear-gradient(0deg, rgba(18,18,18,0.8141631652661064) 0%, rgba(18,18,18,1) 14%, rgba(25,34,45,1) 100%);">
        <h1>SPACE</h1>
        <AccountComponent />
    </div>

    <div class="panel">
        <h2>Contracts</h2>
        @foreach (var contract in this.Application.Contracts.Values)
        {
            <ContractView Contract=@contract />
        }
    </div>

    <div class="panel">
        <h2>Ships</h2>
        <div style="display:flex; flex-wrap:wrap; gap:1em;">
            @foreach (var ship in this.Application.Ships.Values)
            {
                <ShipCardView ShipModel=@ship.Value />
            }
        </div>

        @if (this.Application.SelectedShip.Value is not null)
        {
            <ShipDetailView Ship=@this.Application.SelectedShip.Value />
        }
    </div>

    <div class="panel" style="display:flex; flex-direction:column; gap:1em;">
        <h2>
            <label>
                System
                <input list="systems" @bind-value=this.SystemTextBoxValue @oninput=this.SystemTextbox_Input style="font-size:.7em;">
                <datalist id="systems">
                    @foreach (var system in this.Application.KnownSystems)
                    {
                        <option value="@system.SpaceSystem.Value.Symbol" />
                    })
                </datalist>
            </label>
        </h2>

        <SystemView System=@mSelectedSystem />
    </div>
</div>

@code {
    private SystemModel? mSelectedSystem = null;

    private string SystemTextBoxValue { get; set; } = string.Empty;

    private async Task SystemTextbox_Input(ChangeEventArgs e)
    {
        mSelectedSystem = await this.Application.TryGetSystem(e.Value as string ?? string.Empty);
    }

    protected override async void OnSelectedWaypointChanged(Waypoint? selectedWaypoint)
    {
        base.OnSelectedWaypointChanged(selectedWaypoint);

        var systemSymbol = this.Application.SelectedWaypoint.Value?.SystemSymbol;
        this.SystemTextBoxValue = systemSymbol ?? string.Empty;

        if (string.IsNullOrEmpty(systemSymbol))
        {
            return;
        }

        mSelectedSystem = await this.Application.TryGetSystem(systemSymbol);

        await this.InvokeAsync(this.StateHasChanged);
    }
}