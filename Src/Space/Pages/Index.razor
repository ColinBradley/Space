@page "/";

@using Space.Models;
@using SpaceTraders.Model;

@implements IDisposable;

@inject SpaceApplication Application;
@inject IJSRuntime JS;

<PageTitle>Space</PageTitle>

<div style="display:grid;">
    <h1>SPAAACE</h1>
    <Space.Components.AccountComponent/>

    <div class="panel">
        <div>Name: @this.Application.Agent.Value?.Symbol</div>
        <div>Credits: @this.Application.Agent.Value?.Credits</div>
        <div>Home: @this.Application.Agent.Value?.Headquarters</div>
    </div>

    <div class="panel">
        <h2>Ships</h2>
        @foreach (var ship in this.Application.AgentShips.Values.Select(o => o.Value))
        {
            <div class="panel">
                <div>@ship.Registration.Name - @ship.Registration.Role</div>
                <div>Frame: @ship.Frame.Name - @ship.Frame.Description</div>
                <div>Cargo: @ship.Cargo.Units / @ship.Cargo.Capacity</div>
                <div>Crew: @ship.Crew.Current / @ship.Crew.Capacity</div>
                <div>Location: @ship.Nav.WaypointSymbol</div>
            </div>
        }
    </div>
    <div class="panel">
        <h2>Contracts</h2>
        @foreach (var contract in this.Application.Contracts.Values.Select(o => o.Value))
        {
            <div class="panel">
                <div>@contract.Type</div>
                <div>Deadline: @(contract.Accepted ? contract.DeadlineToAccept : contract.Terms.Deadline)</div>
                <div>Accepted: @contract.Accepted</div>
                <div>Payment: @contract.Terms.Payment.OnAccepted + @contract.Terms.Payment.OnFulfilled</div>
                <div class="panel">
                    @foreach(var delivery in contract.Terms.Deliver)
                    {
                        <div>Deliver: @delivery.UnitsFulfilled/@delivery.UnitsRequired @delivery.TradeSymbol to @delivery.DestinationSymbol</div>
                    }
                </div>
            </div>
        }
    </div>

    <canvas @ref="mRenderCanvas" width="500" height="500" style="width: 100%; height: 500px;" />
</div>

<style>
    .panel {
        padding: 1em;
        border: thin solid #7777;
    }
</style>

@code {
    private ElementReference mRenderCanvas;
    private bool mIs3DReady = false;
    private IJSObjectReference? mMapModule;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        this.Application.Changed += this.Application_Changed;
        this.Application.VisibleSystemWaypoints.Changed += this.VisibleSystemWaypoints_Changed;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (!firstRender)
        {
            return;
        }

        mMapModule =
            await JS.InvokeAsync<IJSObjectReference>(
                "import", 
                "./js/map.js");

        await mMapModule.InvokeVoidAsync("initialize", mRenderCanvas);

        mIs3DReady = true;

        var waypoints = this.Application.VisibleSystemWaypoints.Values.Select(o => o.Value).ToArray();
        await mMapModule!.InvokeVoidAsync("setWaypoints", new[] { waypoints });
    }

    private void Application_Changed()
    {
        _ = this.InvokeAsync(this.StateHasChanged);
    }

    private void VisibleSystemWaypoints_Changed(ObservableCollection<Waypoint> _observable)
    {
        if (!mIs3DReady)
        {
            return;
        }

        this.InvokeAsync(async () =>
        {
            var waypoints = this.Application.VisibleSystemWaypoints.Values.Select(o => o.Value).ToArray();
            await mMapModule!.InvokeVoidAsync("setWaypoints", new[] { waypoints });
        });
    }

    public void Dispose()
    {
        this.Application.Changed -= this.Application_Changed;
    }
}