@page "/";

@using Microsoft.AspNetCore.WebUtilities;
@using Space.Components
@using Space.Helpers;
@using Space.Models;
@using SpaceTraders.Model;

@implements IDisposable;

@inject SpaceApplication Application;
@inject NavigationManager NavigationManager;

<PageTitle>Space</PageTitle>

<div style="display:flex; flex-direction:column; gap:1em; padding:1em;">
    <div style="display:flex; justify-content:space-between;">
        <h1>SPACE</h1>
        <AccountComponent />
    </div>

    <div class="panel">
        <h2>Contracts</h2>
        @foreach (var contract in this.Application.Contracts.Values)
        {
            <ContractView Contract=@contract />
        }
    </div>

    <div class="panel">
        <h2>Ships</h2>
        <div style="display:flex; flex-wrap:wrap; gap:1em;">
            @foreach (var ship in this.Application.Ships.Values)
            {
                <ShipCardView Ship=@ship />
            }
        </div>

        @if (this.NavigationManager.TryGetQueryString(Navigation.SELECTED_SHIP_QUERY_STRING_KEY, out var selectedWaypoint))
        {
            var ship = this.Application.Ships.Values.FirstOrDefault(s => s.Value.Symbol == selectedWaypoint);

            if (ship is not null)
            {
                <ShipDetailView Ship=@ship />
            }
        }
    </div>

    <div class="panel" style="display:flex; flex-direction:column; gap:1em;">
        <h2>
            <label>
                System
                <input list="systems" @bind-value=this.SystemTextBoxValue @oninput=this.SystemTextbox_Input style="font-size:.7em;">
                <datalist id="systems">
                    @foreach (var system in this.Application.KnownSystems)
                    {
                        <option value="@system.SpaceSystem.Value.Symbol" />
                    })
                </datalist>
            </label>
        </h2>

        <SystemView System="@mSelectedSystem" />
    </div>
</div>

@code {
    private SystemModel? mSelectedSystem = null;

    private string SystemTextBoxValue { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        this.Application.Changed += this.Application_Changed;
        this.NavigationManager.LocationChanged += this.NavigationManager_LocationChanged;

        await this.TrySetSystemFromUrl();
    }

    private void Application_Changed()
    {
        _ = this.InvokeAsync(this.StateHasChanged);
    }

    private async Task SystemTextbox_Input(ChangeEventArgs e)
    {
        mSelectedSystem = await this.Application.TryGetSystem(e.Value as string ?? string.Empty);
    }

    private void NavigationManager_LocationChanged(object? sender, LocationChangedEventArgs e)
    {
        _ = this.TrySetSystemFromUrl();

        this.StateHasChanged();
    }

    private async Task TrySetSystemFromUrl()
    {
        if (!this.NavigationManager.TryGetQueryString(Navigation.SELECTED_WAYPOINT_QUERY_STRING_KEY, out var selectedWaypoint))
        {
            return;
        }

        this.SystemTextBoxValue = new WaypointLocation(selectedWaypoint).SectorAndSystem;

        mSelectedSystem = await this.Application.TryGetSystem(this.SystemTextBoxValue);

        this.StateHasChanged();
    }

    public void Dispose()
    {
        this.Application.Changed -= this.Application_Changed;
    }
}